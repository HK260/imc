{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bfcef4ef-fee1-43fe-ad4d-ed4bf3214647",
   "metadata": {},
   "outputs": [],
   "source": [
    "from typing import Dict, List\n",
    "from datamodel import OrderDepth, TradingState, Order\n",
    "\n",
    "class DualProductTrader:\n",
    "    PRODUCTS = [\"AMETHYSTS\", \"STARFRUIT\"]  # Trading two products\n",
    "    INITIAL_PRICES = {\n",
    "        \"AMETHYSTS\": 10_000,\n",
    "        \"STARFRUIT\": 5_000,\n",
    "    }\n",
    "    POSITION_LIMITS = {\n",
    "        \"AMETHYSTS\": 20,\n",
    "        \"STARFRUIT\": 20,\n",
    "    }\n",
    "    EMA_PARAM = 0.5\n",
    "\n",
    "    def __init__(self) -> None:\n",
    "        self.positions = {\"AMETHYSTS\": 0, \"STARFRUIT\": 0}\n",
    "        self.cash = 0\n",
    "        self.ema_prices = {\n",
    "            \"AMETHYSTS\": self.INITIAL_PRICES[\"AMETHYSTS\"],\n",
    "            \"STARFRUIT\": self.INITIAL_PRICES[\"STARFRUIT\"],\n",
    "        }\n",
    "        print(\"Dual Product Trader Initialized.\")\n",
    "\n",
    "    def update_ema_price(self, product: str, new_price: float) -> None:\n",
    "        \"\"\"Update the EMA price for a product based on the new price.\"\"\"\n",
    "        self.ema_prices[product] = self.EMA_PARAM * new_price + (1 - self.EMA_PARAM) * self.ema_prices[product]\n",
    "\n",
    "    def get_mid_price(self, product: str, state: TradingState) -> float:\n",
    "        \"\"\"Calculate and return the mid price for a product.\"\"\"\n",
    "        if product not in state.order_depths or not state.order_depths[product].buy_orders or not state.order_depths[product].sell_orders:\n",
    "            return self.ema_prices[product]  # Use EMA price if market data is missing\n",
    "\n",
    "        market_bids = state.order_depths[product].buy_orders\n",
    "        market_asks = state.order_depths[product].sell_orders\n",
    "        best_bid = max(market_bids)\n",
    "        best_ask = min(market_asks)\n",
    "        return (best_bid + best_ask) / 2\n",
    "\n",
    "    def generate_orders(self, state: TradingState) -> Dict[str, List[Order]]:\n",
    "        \"\"\"Generate buy or sell orders for both products based on their positions and EMA prices.\"\"\"\n",
    "        orders = {}\n",
    "        for product in self.PRODUCTS:\n",
    "            new_mid_price = self.get_mid_price(product, state)\n",
    "            self.update_ema_price(product, new_mid_price)\n",
    "\n",
    "            position_limit = self.POSITION_LIMITS[product]\n",
    "            if self.positions[product] < position_limit:\n",
    "                # Buy order if under position limit\n",
    "                orders[product] = [Order(product, self.ema_prices[product], 1)]\n",
    "            elif self.positions[product] > -position_limit:\n",
    "                # Sell order if over position limit\n",
    "                orders[product] = [Order(product, self.ema_prices[product], -1)]\n",
    "            else:\n",
    "                # No orders if at position limit\n",
    "                orders[product] = []\n",
    "                \n",
    "            print(f\"Generated Order for {product}: {orders[product]}\")\n",
    "\n",
    "        return orders\n",
    "\n",
    "    def run(self, state: TradingState) -> Dict[str, List[Order]]:\n",
    "        \"\"\"Main method to generate orders based on the current state for both products.\"\"\"\n",
    "        return self.generate_orders(state)\n",
    "\n",
    "# Example usage\n",
    "# This assumes that datamodel.py and a simulation mechanism are in place.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d6ce4778-c445-4fe6-aa87-8f219dc6c1ef",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
