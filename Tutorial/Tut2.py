{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "afb198fb-1555-4087-a324-d76d5465fe64",
   "metadata": {},
   "outputs": [],
   "source": [
    "import jsonpickle\n",
    "from datamodel import OrderDepth, UserId, TradingState, Order\n",
    "from typing import Any, List, Dict\n",
    "import math\n",
    "import collections\n",
    "\n",
    "# Note - all PRODUCT1 and PRODUCT2 strings are for unit testing purposes only.\n",
    "\n",
    "POSITION_LIMIT = 20\n",
    "\n",
    "POSITION_LIMITS = {\n",
    "\t\"AMETHYSTS\": 19,\n",
    "\t\"STARFRUIT\": 19,\n",
    "\t\"PRODUCT1\": 10,\n",
    "\t\"PRODUCT2\": 20\n",
    "}\n",
    "\n",
    "PRICE_AGGRESSION = 0 # determines how aggressively we hunt for values above and below the spread\n",
    "\n",
    "THRESHOLDS = {\n",
    "\t\"over\": 0,\n",
    "\t\"mid\": 10\n",
    "}\n",
    "\n",
    "STARFRUIT_COEFFICIENTS = [4.39205423, 0.33042703, 0.22349804, 0.25166263, 0.19351935]\n",
    "\n",
    "class Trader:\n",
    "\tprevious_starfruit_prices = []\n",
    "\n",
    "\tdef update_starfruit_price_history(self, previousTradingState, tradingState: TradingState):\n",
    "\t\tif \"previous_starfruit_prices\" in previousTradingState:\n",
    "\t\t\tself.previous_starfruit_prices = previousTradingState[\"previous_starfruit_prices\"]\n",
    "\t\telse:\n",
    "\t\t\tself.previous_starfruit_prices = []\n",
    "\n",
    "\t\t# get the current price and append it to the list\n",
    "\t\tlowest_sell_price = sorted(tradingState.order_depths[\"STARFRUIT\"].sell_orders.keys())[0]\n",
    "\t\thighest_buy_price = sorted(tradingState.order_depths[\"STARFRUIT\"].buy_orders.keys(), reverse=True)[0]\n",
    "\n",
    "\t\tcurrent_mid_price = (lowest_sell_price + highest_buy_price) / 2\n",
    "\n",
    "\t\tself.previous_starfruit_prices.append(current_mid_price)\n",
    "\n",
    "\t\tif len(self.previous_starfruit_prices) > 4:\n",
    "\t\t\tself.previous_starfruit_prices.pop(0)\n",
    "\n",
    "\n",
    "\tdef get_starfruit_price(self) -> float | None:\n",
    "\t\t# if we don't have enough data, return None\n",
    "\t\tif len(self.previous_starfruit_prices) < 4:\n",
    "\t\t\treturn None\n",
    "\n",
    "\t\t# calculate the average of the last four prices\n",
    "\n",
    "\t\tprint(STARFRUIT_COEFFICIENTS)\n",
    "\t\tprint(self.previous_starfruit_prices)\n",
    "\t\tprint(sum([STARFRUIT_COEFFICIENTS[i] * self.previous_starfruit_prices[i] for i in range(4)]))\n",
    "\n",
    "\t\texpected_price = STARFRUIT_COEFFICIENTS[0] + sum([STARFRUIT_COEFFICIENTS[i + 1] * self.previous_starfruit_prices[i] for i in range(4)])\n",
    "\n",
    "\t\treturn expected_price\n",
    "\n",
    "\tdef get_orders(self, state: TradingState, acceptable_price: int | float, product: str) -> List[Order]:\n",
    "\t\t# market taking + making based on Stanford's 2023 entry\n",
    "\t\tproduct_order_depth = state.order_depths[product]\n",
    "\t\tproduct_position_limit = POSITION_LIMITS[product]\n",
    "\t\tacceptable_buy_price = math.floor(acceptable_price)\n",
    "\t\tacceptable_sell_price = math.ceil(acceptable_price)\n",
    "\t\torders = []\n",
    "\t\t\n",
    "\t\t# sort the order books by price (will sort by the key by default)\n",
    "\t\torders_sell = sorted(list(product_order_depth.sell_orders.items()), key = lambda x: x[0])\n",
    "\t\torders_buy = sorted(list(product_order_depth.buy_orders.items()), key=lambda x: x[0], reverse=True)\n",
    "\t\t\n",
    "\t\tlowest_sell_price = orders_sell[0][0]\n",
    "\t\tlowest_buy_price = orders_buy[0][0]\n",
    "\n",
    "\t\t# we start with buying - using our current position to determine how much and how aggressively we buy from the market\n",
    "\n",
    "\t\tbuying_pos = state.position.get(product, 0)\n",
    "\n",
    "\t\tfor ask, vol in orders_sell:\n",
    "\t\t\t# skip if there is no quota left\n",
    "\t\t\tif product_position_limit - buying_pos <= 0:\n",
    "\t\t\t\tbreak\n",
    "\n",
    "\t\t\tif ask < acceptable_price - PRICE_AGGRESSION:\n",
    "\t\t\t\t# we want to buy\n",
    "\t\t\t\tbuy_amount = min(-vol, product_position_limit - buying_pos)\n",
    "\t\t\t\tbuying_pos += buy_amount\n",
    "\t\t\t\tassert(buy_amount > 0)\n",
    "\t\t\t\torders.append(Order(product, ask, -buy_amount))\n",
    "\n",
    "\t\t\t# if overleveraged, buy up until we are no longer leveraged\n",
    "\t\t\tif ask == acceptable_buy_price and buying_pos < 0:\n",
    "\t\t\t\tbuy_amount = min(-vol, -buying_pos)\n",
    "\t\t\t\tbuying_pos += buy_amount\n",
    "\t\t\t\tassert(buy_amount > 0)\n",
    "\t\t\t\torders.append(Order(product, ask, -buy_amount))\n",
    "\n",
    "\t\t# once we exhaust all profitable sell orders, we place additional buy orders\n",
    "\t\t# at a price acceptable to us\n",
    "\t\t# what that price looks like will depend on our position\n",
    "\t\t\n",
    "\t\tif product_position_limit - buying_pos > 0: # if we have capacity\n",
    "\t\t\tif buying_pos < THRESHOLDS[\"over\"]: # if we are overleveraged to sell, buy at parity for price up to neutral position\n",
    "\t\t\t\ttarget_buy_price = min(acceptable_buy_price, lowest_buy_price + 1)\n",
    "\t\t\t\tvol = -buying_pos + THRESHOLDS[\"over\"]\n",
    "\t\t\t\torders.append(Order(product, target_buy_price, vol))\n",
    "\t\t\t\tprint(f\"Market making 1: buying {vol} at {target_buy_price}\")\n",
    "\t\t\t\tbuying_pos += vol\n",
    "\t\t\tif THRESHOLDS[\"over\"] <= buying_pos <= THRESHOLDS[\"mid\"]:\n",
    "\t\t\t\ttarget_buy_price = min(acceptable_buy_price - 1, lowest_buy_price + 1)\n",
    "\t\t\t\tvol = -buying_pos + THRESHOLDS[\"mid\"] # if we are close to neutral\n",
    "\t\t\t\torders.append(Order(product, target_buy_price, vol))\n",
    "\t\t\t\tprint(f\"Market making 2: buying {vol} at {target_buy_price}\")\n",
    "\t\t\t\tbuying_pos += vol\n",
    "\t\t\tif buying_pos >= THRESHOLDS[\"mid\"]:\n",
    "\t\t\t\ttarget_buy_price = min(acceptable_buy_price - 3, lowest_buy_price + 1)\n",
    "\t\t\t\tvol = product_position_limit - buying_pos\n",
    "\t\t\t\torders.append(Order(product, target_buy_price, vol))\n",
    "\t\t\t\tprint(f\"Market making 3: buying {vol} at {target_buy_price}\")\n",
    "\t\t\t\tbuying_pos += vol\n",
    "\t\t\t\t\n",
    "\t\t# now we sell - we reset our position\n",
    "\t\tselling_pos = state.position.get(product, 0)\n",
    "\n",
    "\t\tfor bid, vol in orders_buy:\n",
    "\t\t\t# positive orders in the list\n",
    "\t\t\t# but we are sending negative sell orders, so we negate it\n",
    "\t\t\t# max we can sell is -product_position_limit - current position\n",
    "\t\t\t# if current position is negative we can sell less - if positive we can sell more\n",
    "\t\t\t\n",
    "\t\t\tif -product_position_limit - selling_pos >= 0:\n",
    "\t\t\t\tbreak\n",
    "\n",
    "\t\t\tif bid > acceptable_price + PRICE_AGGRESSION:\n",
    "\t\t\t\tsell_amount = max(-vol, -product_position_limit - selling_pos)\n",
    "\t\t\t\tselling_pos += sell_amount\n",
    "\t\t\t\tassert(sell_amount < 0)\n",
    "\t\t\t\torders.append(Order(product, bid, sell_amount))\n",
    "\t\t\t\tprint(\"Sell order 1: \", sell_amount, bid)\n",
    "\t\t\n",
    "\t\t\t# if at parity, sell up until we are no longer leveraged\n",
    "\t\t\tif bid == acceptable_sell_price and selling_pos > 0:\n",
    "\t\t\t\tsell_amount = max(-vol, -selling_pos)\n",
    "\t\t\t\tselling_pos += sell_amount\n",
    "\t\t\t\tassert(sell_amount < 0)\n",
    "\t\t\t\torders.append(Order(product, bid, sell_amount))\n",
    "\t\t\t\tprint(\"Sell order 2: \", sell_amount, bid)\n",
    "\n",
    "\t\t# start market making with remaining quota\n",
    "\t\t# if selling_pos\n",
    "\t\tif -product_position_limit - selling_pos < 0:\n",
    "\t\t\tif selling_pos > -THRESHOLDS[\"over\"]:\n",
    "\t\t\t\ttarget_sell_price = max(acceptable_sell_price, lowest_sell_price - 1)\n",
    "\t\t\t\tvol = -selling_pos - THRESHOLDS[\"over\"]\n",
    "\t\t\t\torders.append(Order(product, target_sell_price, vol))\n",
    "\t\t\t\tselling_pos += vol\n",
    "\t\t\t\tprint(f\"Sell order 3: selling {vol} at {target_sell_price}\")\n",
    "\t\t\tif -THRESHOLDS[\"over\"] >= selling_pos >= -THRESHOLDS[\"mid\"]:\n",
    "\t\t\t\ttarget_sell_price = max(acceptable_sell_price + 1, lowest_sell_price - 1)\n",
    "\t\t\t\tvol = -selling_pos - THRESHOLDS[\"mid\"]\n",
    "\t\t\t\torders.append(Order(product, target_sell_price, vol))\n",
    "\t\t\t\tselling_pos += vol\n",
    "\t\t\t\tprint(f\"Sell order 4: selling {vol} at {target_sell_price}\")\n",
    "\t\t\tif -THRESHOLDS[\"mid\"] >= selling_pos:\n",
    "\t\t\t\ttarget_sell_price = max(acceptable_sell_price + 2, lowest_sell_price - 1)\n",
    "\t\t\t\tvol = -product_position_limit - selling_pos\n",
    "\t\t\t\torders.append(Order(product, target_sell_price, vol))\n",
    "\t\t\t\tselling_pos += vol\n",
    "\t\t\t\tprint(f\"Sell order 5: selling {vol} at {target_sell_price}\")\n",
    "\t\t\t\t\n",
    "\t\treturn orders\n",
    "\t\n",
    "\tdef get_acceptable_price(self, state: TradingState, product: str) -> int | float | None:\n",
    "\t\tif product == \"AMETHYSTS\":\n",
    "\t\t\treturn 10000\n",
    "\t\tif product == \"STARFRUIT\":\n",
    "\t\t\treturn self.get_starfruit_price()\n",
    "\t\treturn None\n",
    "\n",
    "\n",
    "\tdef run(self, state: TradingState):\n",
    "\t\ttry:\n",
    "\t\t\tpreviousStateData = jsonpickle.decode(state.traderData)\n",
    "\t\texcept:\n",
    "\t\t\tpreviousStateData = {}\n",
    "\t\tself.update_starfruit_price_history(previousStateData, state)\n",
    "\n",
    "\t\tresult = {}\n",
    "\n",
    "\t\tfor product in state.order_depths:\n",
    "\t\t\tproduct_acceptable_price = self.get_acceptable_price(state, product)\n",
    "\t\t\tif product_acceptable_price is None:\n",
    "\t\t\t\tcontinue\n",
    "\t\t\telse:\n",
    "\t\t\t\tprint(f\"Getting orders for {product} at {product_acceptable_price}\")\n",
    "\t\t\t\torders = self.get_orders(state, product_acceptable_price, product)\n",
    "\t\t\t\tresult[product] = orders\n",
    "\t\n",
    "\t\ttraderData = {\n",
    "\t\t\t\"previous_starfruit_prices\": self.previous_starfruit_prices\n",
    "\t\t} \n",
    "\n",
    "\t\tprint(self.previous_starfruit_prices)\n",
    "\t\tserialisedTraderData = jsonpickle.encode(traderData)\n",
    "\n",
    "\t\tconversions = 0 # Don't fully understand conversions? Not really documented in the task description\n",
    "\n",
    "\t\treturn result, conversions, serialisedTraderData"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cda1dbfa-0364-45ad-88fa-2544cf41d6c9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
